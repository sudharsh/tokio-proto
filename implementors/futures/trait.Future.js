(function() {var implementors = {};
implementors["tokio_proto"] = ["impl&lt;T,&nbsp;E&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/client/struct.Response.html' title='tokio_proto::client::Response'>Response</a>&lt;T,&nbsp;E&gt; <span class='where'>where E: <a class='trait' href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html' title='core::convert::From'>From</a>&lt;<a class='enum' href='tokio_proto/enum.Error.html' title='tokio_proto::Error'>Error</a>&lt;E&gt;&gt;</span>","impl&lt;T&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/multiplex/struct.Multiplex.html' title='tokio_proto::multiplex::Multiplex'>Multiplex</a>&lt;T&gt; <span class='where'>where T: <a class='trait' href='tokio_proto/multiplex/trait.Dispatch.html' title='tokio_proto::multiplex::Dispatch'>Dispatch</a></span>","impl&lt;S,&nbsp;T,&nbsp;B&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/multiplex/struct.Server.html' title='tokio_proto::multiplex::Server'>Server</a>&lt;S,&nbsp;T,&nbsp;B&gt; <span class='where'>where T: <a class='trait' href='tokio_proto/multiplex/trait.Transport.html' title='tokio_proto::multiplex::Transport'>Transport</a>, S: Service&lt;Request=<a class='enum' href='tokio_proto/enum.Message.html' title='tokio_proto::Message'>Message</a>&lt;T::Out,&nbsp;<a class='struct' href='tokio_proto/struct.Body.html' title='tokio_proto::Body'>Body</a>&lt;T::BodyOut,&nbsp;T::Error&gt;&gt;,&nbsp;Response=<a class='enum' href='tokio_proto/enum.Message.html' title='tokio_proto::Message'>Message</a>&lt;T::In,&nbsp;B&gt;,&nbsp;Error=T::Error&gt; + 'static, B: <a class='trait' href='https://docs.rs/futures/0.1/futures/stream/trait.Stream.html' title='futures::stream::Stream'>Stream</a>&lt;Item=T::BodyIn,&nbsp;Error=T::Error&gt;</span>","impl&lt;S,&nbsp;T,&nbsp;B&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/pipeline/struct.Server.html' title='tokio_proto::pipeline::Server'>Server</a>&lt;S,&nbsp;T,&nbsp;B&gt; <span class='where'>where T: <a class='trait' href='tokio_proto/pipeline/trait.Transport.html' title='tokio_proto::pipeline::Transport'>Transport</a>, S: Service&lt;Request=<a class='enum' href='tokio_proto/enum.Message.html' title='tokio_proto::Message'>Message</a>&lt;T::Out,&nbsp;<a class='struct' href='tokio_proto/struct.Body.html' title='tokio_proto::Body'>Body</a>&lt;T::BodyOut,&nbsp;T::Error&gt;&gt;,&nbsp;Response=<a class='enum' href='tokio_proto/enum.Message.html' title='tokio_proto::Message'>Message</a>&lt;T::In,&nbsp;B&gt;,&nbsp;Error=T::Error&gt; + 'static, B: <a class='trait' href='https://docs.rs/futures/0.1/futures/stream/trait.Stream.html' title='futures::stream::Stream'>Stream</a>&lt;Item=T::BodyIn,&nbsp;Error=T::Error&gt;</span>","impl&lt;T&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/pipeline/struct.Pipeline.html' title='tokio_proto::pipeline::Pipeline'>Pipeline</a>&lt;T&gt; <span class='where'>where T: <a class='trait' href='tokio_proto/pipeline/trait.Dispatch.html' title='tokio_proto::pipeline::Dispatch'>Dispatch</a></span>","impl&lt;S,&nbsp;T,&nbsp;Out,&nbsp;In&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/easy/multiplex/struct.EasyServer.html' title='tokio_proto::easy::multiplex::EasyServer'>EasyServer</a>&lt;S,&nbsp;T,&nbsp;Out,&nbsp;In&gt; <span class='where'>where S: Service&lt;Request=Out,&nbsp;Response=In,&nbsp;Error=<a class='struct' href='https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html' title='std::io::error::Error'>Error</a>&gt; + 'static, T: FramedIo&lt;In=<a class='primitive' href='https://doc.rust-lang.org/nightly/std/primitive.tuple.html'>(</a><a class='type' href='tokio_proto/multiplex/type.RequestId.html' title='tokio_proto::multiplex::RequestId'>RequestId</a>, In<a class='primitive' href='https://doc.rust-lang.org/nightly/std/primitive.tuple.html'>)</a>,&nbsp;Out=<a class='enum' href='https://doc.rust-lang.org/nightly/core/option/enum.Option.html' title='core::option::Option'>Option</a>&lt;<a class='primitive' href='https://doc.rust-lang.org/nightly/std/primitive.tuple.html'>(</a><a class='type' href='tokio_proto/multiplex/type.RequestId.html' title='tokio_proto::multiplex::RequestId'>RequestId</a>, Out<a class='primitive' href='https://doc.rust-lang.org/nightly/std/primitive.tuple.html'>)</a>&gt;&gt; + 'static, In: 'static, Out: 'static</span>","impl&lt;S,&nbsp;T,&nbsp;I&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/easy/pipeline/struct.EasyServer.html' title='tokio_proto::easy::pipeline::EasyServer'>EasyServer</a>&lt;S,&nbsp;T,&nbsp;I&gt; <span class='where'>where S: Service&lt;Request=I,&nbsp;Response=T::In,&nbsp;Error=<a class='struct' href='https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html' title='std::io::error::Error'>Error</a>&gt; + 'static, T: FramedIo&lt;Out=<a class='enum' href='https://doc.rust-lang.org/nightly/core/option/enum.Option.html' title='core::option::Option'>Option</a>&lt;I&gt;&gt; + 'static, T::In: 'static, I: 'static</span>","impl&lt;T&gt; <a class='trait' href='https://docs.rs/futures/0.1/futures/trait.Future.html' title='futures::Future'>Future</a> for <a class='struct' href='tokio_proto/easy/struct.EasyResponse.html' title='tokio_proto::easy::EasyResponse'>EasyResponse</a>&lt;T&gt;",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
